var _user$project$Update$init = {ctor: '_Tuple2', _0: _user$project$Model$model, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Update$moveArmy = F4(
	function (regions, army, oldIndex, newIndex) {
		return A2(
			_elm_lang$core$Array$indexedMap,
			F2(
				function (mapIndex, mapRegion) {
					return _elm_lang$core$Native_Utils.eq(mapIndex, oldIndex) ? _elm_lang$core$Native_Utils.update(
						mapRegion,
						{army: _elm_lang$core$Maybe$Nothing}) : (_elm_lang$core$Native_Utils.eq(mapIndex, newIndex) ? _elm_lang$core$Native_Utils.update(
						mapRegion,
						{army: army}) : mapRegion);
				}),
			regions);
	});
var _user$project$Update$addUnit = F2(
	function (model, addUnitAction) {
		var _p0 = addUnitAction;
		switch (_p0.ctor) {
			case 'Start':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currentState: _user$project$Model$AddingUnit(_user$project$Model$ChoosingUnitSide)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ChooseUnitSide':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currentState: _user$project$Model$AddingUnit(
								_user$project$Model$ChoosingUnitType(_p0._0))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ChooseUnitType':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currentState: _user$project$Model$AddingUnit(
								A2(_user$project$Model$PlacingUnit, _p0._0, _p0._1))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentState: _user$project$Model$Idle}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Update$deselectRegion = function (model) {
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			model,
			{selectedRegion: _elm_lang$core$Maybe$Nothing, currentState: _user$project$Model$Idle}),
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$Update$selectRegion = F2(
	function (model, clickedIndex) {
		var army = A2(
			_elm_lang$core$Maybe$andThen,
			function (_) {
				return _.army;
			},
			A2(_elm_lang$core$Array$get, clickedIndex, model.regions));
		var _p1 = army;
		if (_p1.ctor === 'Nothing') {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		} else {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{
						selectedRegion: _elm_lang$core$Maybe$Just(clickedIndex),
						currentState: _user$project$Model$MovingArmy
					}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}
	});
var _user$project$Update$update = F2(
	function (action, model) {
		var _p2 = action;
		switch (_p2.ctor) {
			case 'MouseMove':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mousex: _p2._0, mousey: _p2._1}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ClickRegion':
				var _p8 = _p2._0;
				var _p3 = model.currentState;
				switch (_p3.ctor) {
					case 'AddingUnit':
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					case 'Idle':
						return A2(_user$project$Update$selectRegion, model, _p8);
					default:
						var _p4 = model.selectedRegion;
						if (_p4.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{selectedRegion: _elm_lang$core$Maybe$Nothing, currentState: _user$project$Model$Idle}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						} else {
							var _p7 = _p4._0;
							if (_elm_lang$core$Native_Utils.eq(_p7, _p8)) {
								return _user$project$Update$deselectRegion(model);
							} else {
								var _p5 = A2(_elm_lang$core$Array$get, _p7, model.regions);
								if (_p5.ctor === 'Nothing') {
									return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
								} else {
									var _p6 = _p5._0;
									return A2(
										_elm_lang$core$List$any,
										function (i) {
											return _elm_lang$core$Native_Utils.eq(i, _p8);
										},
										_p6.connections) ? {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Native_Utils.update(
											model,
											{
												selectedRegion: _elm_lang$core$Maybe$Just(_p8),
												regions: A4(_user$project$Update$moveArmy, model.regions, _p6.army, _p7, _p8)
											}),
										_1: _elm_lang$core$Platform_Cmd$none
									} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
								}
							}
						}
				}
			default:
				return A2(_user$project$Update$addUnit, model, _p2._0);
		}
	});
var _user$project$Update$AddUnit = function (a) {
	return {ctor: 'AddUnit', _0: a};
};
var _user$project$Update$ClickRegion = function (a) {
	return {ctor: 'ClickRegion', _0: a};
};
var _user$project$Update$MouseMove = F2(
	function (a, b) {
		return {ctor: 'MouseMove', _0: a, _1: b};
	});
var _user$project$Update$Finish = {ctor: 'Finish'};
var _user$project$Update$ChooseUnitType = F2(
	function (a, b) {
		return {ctor: 'ChooseUnitType', _0: a, _1: b};
	});
var _user$project$Update$ChooseUnitSide = function (a) {
	return {ctor: 'ChooseUnitSide', _0: a};
};
var _user$project$Update$Start = {ctor: 'Start'};
